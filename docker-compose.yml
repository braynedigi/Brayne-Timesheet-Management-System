version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: timesheet-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: timesheet_db
      POSTGRES_USER: timesheet_user
      POSTGRES_PASSWORD: timesheet_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - timesheet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timesheet_user -d timesheet_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timesheet-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://timesheet_user:timesheet_password@postgres:5432/timesheet_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-email-password
      UPLOAD_PATH: /app/uploads
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/prisma:/app/prisma
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - timesheet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: timesheet-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: http://localhost:5000/api
      VITE_APP_NAME: Brayne Timesheet
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - timesheet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: timesheet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    networks:
      - timesheet-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  timesheet-network:
    driver: bridge

# Development overrides
x-development: &development
  environment:
    NODE_ENV: development
    CORS_ORIGIN: http://localhost:3000,http://localhost:5173
  volumes:
    - ./backend:/app
    - /app/node_modules
    - ./frontend:/app
    - /app/node_modules

# Production overrides
x-production: &production
  environment:
    NODE_ENV: production
    JWT_SECRET: ${JWT_SECRET}
    JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    EMAIL_USER: ${EMAIL_USER}
    EMAIL_PASS: ${EMAIL_PASS}
