generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CustomCurrency {
  id              String            @id @default(cuid())
  code            String            @unique
  name            String
  symbol          String
  isDefault       Boolean           @default(false)
  isActive        Boolean           @default(true)
  exchangeRate    Decimal           @default(1.000000) @db.Decimal(10, 6)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPreferences UserPreferences[]

  @@index([userId])
  @@index([code])
  @@map("custom_currencies")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole         @default(EMPLOYEE)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  customCurrencies CustomCurrency[]
  employeeRate     EmployeeRate?
  notifications    Notification[]
  taskComments     TaskComment[]
  timesheets       Timesheet[]
  preferences      UserPreferences?

  @@index([email])
  @@index([role])
  @@map("users")
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]

  @@map("clients")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timesheets  Timesheet[]

  @@index([clientId])
  @@map("projects")
}

model Task {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         TaskStatus    @default(TODO)
  priority       TaskPriority  @default(MEDIUM)
  estimatedHours Decimal?      @db.Decimal(4, 2)
  actualHours    Decimal?      @db.Decimal(4, 2)
  dueDate        DateTime?
  assignedTo     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  projectId      String
  comments       TaskComment[]
  project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timesheets     Timesheet[]

  @@index([projectId])
  @@index([status])
  @@index([assignedTo])
  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@map("task_comments")
}

model Timesheet {
  id          String        @id @default(cuid())
  taskName    String
  hoursWorked Decimal       @db.Decimal(4, 2)
  date        DateTime
  type        TimesheetType @default(WORK)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  projectId   String
  taskId      String?
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?         @relation(fields: [taskId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([date])
  @@index([userId, date])
  @@map("timesheets")
}

model EmployeeRate {
  id            String   @id @default(cuid())
  hourlyRate    Decimal  @db.Decimal(8, 2)
  effectiveDate DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([effectiveDate])
  @@map("employee_rates")
}

model UserPreferences {
  id                    String          @id @default(cuid())
  theme                 String          @default("light")
  language              String          @default("en")
  timezone              String          @default("UTC")
  dateFormat            String          @default("MM/DD/YYYY")
  timeFormat            String          @default("12h")
  currency              String          @default("USD")
  numberFormat          String          @default("1,234.56")
  compactMode           Boolean         @default(false)
  showAnimations        Boolean         @default(true)
  sidebarCollapsed      Boolean         @default(false)
  emailNotifications    Boolean         @default(true)
  pushNotifications     Boolean         @default(false)
  timesheetReminders    Boolean         @default(true)
  weeklyReports         Boolean         @default(false)
  dailyDigest           Boolean         @default(false)
  projectUpdates        Boolean         @default(true)
  clientNotifications   Boolean         @default(true)
  reminderTime          String          @default("09:00")
  reminderDays          String[]        @default(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"])
  sessionTimeout        Int             @default(30)
  requirePasswordChange Boolean         @default(false)
  twoFactorAuth         Boolean         @default(false)
  customSettings        Json?           @default("{}")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  userId                String          @unique
  customCurrencyId      String?
  customCurrency        CustomCurrency? @relation(fields: [customCurrencyId], references: [id])
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([customCurrencyId])
  @@map("user_preferences")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(PENDING)
  data      Json?
  readAt    DateTime?
  sentAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("notifications")
}

model SystemSettings {
  id                    String   @id @default(cuid())
  softwareName          String   @default("Timesheet Management System")
  logoUrl               String?
  faviconUrl            String?
  primaryColor          String   @default("#3B82F6")
  secondaryColor        String   @default("#10B981")
  buttonColor           String   @default("#3B82F6")
  accentColor           String   @default("#F59E0B")
  backgroundColor       String   @default("#FFFFFF")
  textColor             String   @default("#1F2937")
  borderRadius          String   @default("0.375rem")
  fontFamily            String   @default("Inter")
  fontSize              String   @default("14px")
  footerEnabled         Boolean  @default(true)
  footerText            String   @default("Â© 2024 Timesheet Management System. All rights reserved.")
  footerLinks           String?
  emailNotifications    Boolean  @default(true)
  timesheetReminders    Boolean  @default(true)
  weeklyReports         Boolean  @default(false)
  dailyDigest           Boolean  @default(false)
  projectUpdates        Boolean  @default(true)
  clientNotifications   Boolean  @default(true)
  reminderTime          String   @default("09:00")
  reminderDays          String?
  emailTemplate         String?
  pushNotifications     Boolean  @default(false)
  sessionTimeout        Int      @default(3600)
  requirePasswordChange Boolean  @default(false)
  twoFactorAuth         Boolean  @default(false)
  passwordMinLength     Int      @default(8)
  passwordComplexity    String   @default("medium")
  loginAttempts         Int      @default(5)
  lockoutDuration       Int      @default(900)
  ipWhitelist           String?
  auditLogging          Boolean  @default(true)
  dataEncryption        Boolean  @default(true)
  autoBackup            Boolean  @default(true)
  backupFrequency       String   @default("daily")
  retentionPeriod       Int      @default(30)
  maintenanceMode       Boolean  @default(false)
  debugMode             Boolean  @default(false)
  logLevel              String   @default("info")
  maxFileSize           Int      @default(5242880)
  allowedFileTypes      String?
  dataRetention         Int      @default(365)
  performanceMode       Boolean  @default(false)
  // Display settings
  theme                 String   @default("light")
  language              String   @default("en")
  timezone              String   @default("UTC")
  dateFormat            String   @default("MM/DD/YYYY")
  timeFormat            String   @default("12")
  currency              String   @default("USD")
  numberFormat          String   @default("en-US")
  compactMode           Boolean  @default(false)
  showAnimations        Boolean  @default(true)
  sidebarCollapsed      Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("system_settings")
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum TimesheetType {
  WORK
  MEETING
  RESEARCH
  TRAINING
  BREAK
  OTHER
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
